/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.henry.openapi.controller;

import com.henry.openapi.model.Item;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "items", description = "the items API")
public interface ItemsApi {

    default ItemsApiDelegate getDelegate() {
        return new ItemsApiDelegate() {};
    }

    /**
     * POST /items : Create a new item
     *
     * @param item Item to create (required)
     * @return Item created successfully (status code 201)
     */
    @Operation(
        operationId = "createItem",
        summary = "Create a new item",
        responses = {
            @ApiResponse(responseCode = "201", description = "Item created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Item> createItem(
        @Parameter(name = "Item", description = "Item to create", required = true) @Valid @RequestBody Item item
    ) {
        return getDelegate().createItem(item);
    }


    /**
     * DELETE /items/{id} : Delete an item by ID
     *
     * @param id  (required)
     * @return Item deleted successfully (status code 204)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "deleteItemById",
        summary = "Delete an item by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Item deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/items/{id}"
    )
    
    default ResponseEntity<Void> deleteItemById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().deleteItemById(id);
    }


    /**
     * GET /items : Get all items
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "getAllItems",
        summary = "Get all items",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/items",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Item>> getAllItems(
        
    ) {
        return getDelegate().getAllItems();
    }


    /**
     * GET /items/{id} : Get an item by ID
     *
     * @param id  (required)
     * @return Successful response (status code 200)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "getItemById",
        summary = "Get an item by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/items/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Item> getItemById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().getItemById(id);
    }


    /**
     * PUT /items/{id} : Update an item by ID
     *
     * @param id  (required)
     * @param item Item to update (required)
     * @return Item updated successfully (status code 200)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "updateItemById",
        summary = "Update an item by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Item updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/items/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Item> updateItemById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Item", description = "Item to update", required = true) @Valid @RequestBody Item item
    ) {
        return getDelegate().updateItemById(id, item);
    }

}
